#!/usr/bin/env node

const chalk = require("chalk");
const semver = require("semver");
const requiredVersion = require("../package.json").engines.node;
const didYouMean = require("didyoumean");
const comander = require("commander");

didYouMean.threshold = 0.6;

function checkNodeVersion(wanted, id) {
  if (!semver.satisfies(process.version, wanted)) {
    console.log(
      `${chalk.red(
        `You are using node ${process.version}, but this version of ${id} requires Node ${wanted}.\nPlease upgrade your Node version.`
      )}`
    );
    process.exit(1);
  }
}

checkNodeVersion(requiredVersion, "@levi/cli");

const program = new comander.Command("jscli");

program.version(require("../package").version).usage("<command> [options]");

// 创建项目命令
program
  .command("create <app-name>")
  .description("  Create a react web project.")
  .action((name, cmd) => {
    require("../lib/create")(name);
  });

// 捕获未知的command
program.arguments("<command>").action((cmd) => {
  console.log(chalk.red(cmd));
  program.outputHelp();
  console.log("  " + chalk.red(`Unknown command ${chalk.yellow(cmd)}.`));
  console.log();
  suggestCommands(cmd);
});

// 给出提示
program.on("--help", () => {
  console.log();
  console.log(
    `  Run ${chalk.cyan(
      "asweb <command> --help"
    )} for detailed usage of given command.`
  );
  console.log();
});

// 错误命令处理
const enhanceErrorMessages = require("../lib/util/enhanceErrorMessages");

enhanceErrorMessages("missingArgument", (argName) => {
  return `Missing required argument ${chalk.yellow(`${argName}`)}`;
});

enhanceErrorMessages("unknownOpiton", (optionName) => {
  return `Unknown option ${chalk.yellow(optionName)}`;
});

enhanceErrorMessages("opitonMissingArgument", (option, flag) => {
  return (
    `Missing required argument for option ${chalk.yellow(option.flags)}` +
    (flag ? `, got ${chalk.yellow(flag)}` : "")
  );
});

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  program.outputHelp();
}

function suggestCommands(cmd) {
  const availableCommands = program.commands.map((cmd) => {
    return cmd._name;
  });

  const suggestion = didYouMean(cmd, availableCommands);
  if (suggestion) {
    console.log("  " + chalk.red(`Did you mean ${chalk.yellow(suggestion)}?`));
  }
}
